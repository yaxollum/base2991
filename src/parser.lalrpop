use super::ast::Ast;
use super::num::Num;
use lalrpop_util::ParseError;

grammar;

pub Ast: Ast = {
    () => Ast::NOP,
    BaseConv
}

BaseConv:Ast={
    <Add> "_" r"[xh]"=>Ast::BaseConv(Box::new(<>),16),
    <Add> "_" "b"=>Ast::BaseConv(Box::new(<>),2),
    <Add> "_" "o"=>Ast::BaseConv(Box::new(<>),8),
    <Add> "_" "d"=>Ast::BaseConv(Box::new(<>),10),
    Add

}

Add: Ast={
    <a:Mul> "+" <b:Add>=>Ast::Add(Box::new(a),Box::new(b)),
    <a:Mul> "-" <b:Add>=>Ast::Sub(Box::new(a),Box::new(b)),
    Mul
}

Mul:Ast={
    <a:Num> "*" <b:Mul>=>Ast::Mul(Box::new(a),Box::new(b)),
    <a:Num> "/" <b:Mul>=>Ast::Div(Box::new(a),Box::new(b)),
    Num
}

Num: Ast = r"[0-9a-fA-F]+(\.[0-9a-fA-F]+)?[bdoxh]" =>? match Num::from_str(<>) {Some(num)=>
    Ok(Ast::Literal(num)),None=>Err(ParseError::User{error:"invalid literal"}) };
